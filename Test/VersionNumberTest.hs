module VersionNumberTest where 

import Control.Exception
import Control.Monad
import Test.HUnit
import VersionNumber
import Test.AssertError

versionNumberTests = test [ 
    "test A01"  ~: "toString x"          ~: "x"      ~=? ( toString (Nothing :: Maybe Int) ),
    "test A02"  ~: "toString 1"          ~: "1"      ~=? ( toString ( Just (1 :: Int) ) ),
    "test A03"  ~: "toString 2"          ~: "2"      ~=? ( toString ( Just (2 :: Int) ) ),
    "test A04"  ~: "toString 1345"       ~: "1345"   ~=? ( toString ( Just (1345 :: Int) ) ),
    "test A05"  ~: "toString x.5"          ~: "x.5"    ~=? ( toString (VersionNumber [Nothing, Just 5]) ),
    "test B01"  ~: "decrement VC 0"        ~: "0"      ~=? ( toString ( decrement (Just (0 :: Int)) ) ),
    "test B02"  ~: "decrement VC 1"        ~: "0"      ~=? ( toString ( decrement (Just (1 :: Int)) ) ),
    "test B03"  ~: "decrement VC 256"      ~: "255"    ~=? ( toString ( decrement (Just (256 :: Int) ) ) ),
    "test B04"  ~: "decrement VC x"        ~: "x"      ~=? ( toString ( decrement (Nothing :: Maybe Int) ) ),
    "test C01"  ~: "increment VC 0"        ~: "1"      ~=? ( toString ( increment (Just (0 :: Int)) ) ),
    "test C02"  ~: "increment VC 1"        ~: "2"      ~=? ( toString ( increment (Just (1 :: Int)) ) ),
    "test C03"  ~: "increment VC 256"      ~: "257"    ~=? ( toString ( increment (Just (256 :: Int)) ) ),
    "test C04"  ~: "increment VC x"        ~: "x"      ~=? ( toString ( increment (Nothing :: Maybe Int) ) ), 
    "test E01"  ~: "decrement VN x"          ~: "x"      ~=? ( toString ( decrement (VersionNumber [Nothing]) ) ),
    "test E02"  ~: "decrement VN 3"          ~: "3"      ~=? ( toString ( decrement (VersionNumber [Just 4] ) ) ),
    "test E03"  ~: "decrement VN 1"          ~: "0"      ~=? ( toString ( decrement (VersionNumber [Just 1] ) ) ),
    "test E04"  ~: "decrement VN 0"          ~: "0"      ~=? ( toString ( decrement (VersionNumber [Just 0] ) ) ),
    "test F01"  ~: "increment VN x"          ~: "x"      ~=? ( toString ( increment (VersionNumber [Nothing] ) ) ),
    "test F02"  ~: "increment VN 4"          ~: "5"      ~=? ( toString ( increment (VersionNumber [Just 4] ) ) ),
    "test F03"  ~: "increment VN 35"         ~: "36"     ~=? ( toString ( increment (VersionNumber [Just 35] ) ) ),
    "test G01"  ~: "decrementDim 0 VN 5"     ~: "5"      ~=? ( toString ( decrementDimension 0 $ VersionNumber [Just 5] ) ),
    "test G02"  ~: "decrementDim 1 VN 5"     ~: "4"      ~=? ( toString ( decrementDimension 1 $ VersionNumber [Just 5] ) ),
    "test G03"  ~: "decrementDim 0 VN x.x"   ~: "x.x"    ~=? ( toString ( decrementDimension 0 $ VersionNumber [Nothing, Nothing] ) ),
    "test G04"  ~: "decrementDim 1 VN x.x"   ~: "x.x"    ~=? ( toString ( decrementDimension 1 $ VersionNumber [Nothing, Nothing] ) ),
    "test G05"  ~: "decrementDim 2 VN x.x"   ~: "x.x"    ~=? ( toString ( decrementDimension 2 $ VersionNumber [Nothing, Nothing] ) ),
    "test G06"  ~: "decrementDim 3 VN x.x"   ~: "x.x"    ~=? ( toString ( decrementDimension 3 $ VersionNumber [Nothing, Nothing] ) ),
    "test G07"  ~: "decrementDim 0 VN 3.x"   ~: "3.x"    ~=? ( toString ( decrementDimension 0 $ VersionNumber [Just 3, Nothing] ) ),
    "test G08"  ~: "decrementDim 1 VN 3.1"   ~: "3.0"    ~=? ( toString ( decrementDimension 1 $ VersionNumber [Just 3, Just 1] ) ),
    "test G09"  ~: "decrementDim 2 VN x.5"   ~: "x.5"    ~=? ( toString ( decrementDimension 2 $ VersionNumber [Nothing, Just 5] ) ),
    "test G10"  ~: "decrementDim 3 VN x.6"   ~: "x.6"    ~=? ( toString ( decrementDimension 3 $ VersionNumber [Nothing, Just 6] ) ),
    {-"test G10"  ~: "decrementDim x VN x.6"   ~: "x.6"    ~=? ( toString ( decrementDimension Nothing (VN (VC Nothing) (Just 6)) ) ),-}
    "test G11"  ~: "decrementDim 3 VN x.x.6" ~: "x.x.6"  ~=? ( toString ( decrementDimension 3 $ VersionNumber [Nothing, Nothing, Just 6] ) ),
    "test H01"  ~: "incrementDim 0 VN x.1"   ~: "x.1"    ~=? ( toString ( incrementDimension 0 $ VersionNumber [Nothing, Just 1] ) ),
    "test H02"  ~: "incrementDim 1 VN x.2"   ~: "x.3"    ~=? ( toString ( incrementDimension 1 $ VersionNumber [Nothing, Just 2] ) ),
    "test H03"  ~: "incrementDim 1 VN 3.2"   ~: "3.3"    ~=? ( toString ( incrementDimension 1 $ VersionNumber [Just 3, Just 2] ) ),
    "test H04"  ~: "incrementDim 2 VN 3.2"   ~: "4.2"    ~=? ( toString ( incrementDimension 2 $ VersionNumber [Just 3, Just 2] ) ),
    "test H05"  ~: "incrementDim 3 VN 3.2"   ~: "3.2"    ~=? ( toString ( incrementDimension 3 $ VersionNumber [Just 3, Just 2] ) ),
    {-"test H06"  ~: "incrementDim x VN 2.0"   ~: "2.0"    ~=? ( toString ( incrementDimension Nothing (VN (VC (Just 2)) (Just 0)) ) ),-}
    "test H07"  ~: "incrementDim 3 VN x.x.1" ~: "x.x.1"  ~=? ( toString ( incrementDimension 3 $ VersionNumber [Nothing, Nothing, Just 1] ) ),
    "test I02"  ~: "createVNByNumberOfDimensions 0"        ~: ""        ~=? ( toString $ createVersionNumberByNumberOfDimensions 0 ),
    "test I03"  ~: "createVNByNumberOfDimensions 1"        ~: "x"        ~=? ( toString $ createVersionNumberByNumberOfDimensions 1 ),
    "test I04"  ~: "createVNByNumberOfDimensions 2"        ~: "x.x"    ~=? ( toString $ createVersionNumberByNumberOfDimensions 2 ),
    "test I05"  ~: "createVNByNumberOfDimensions 4"        ~: "x.x.x.x"~=? ( toString $ createVersionNumberByNumberOfDimensions 4 ),
    "test J01"  ~: "isInitial x"                           ~: True        ~=? ( isInitial $ VersionNumber [Nothing] ),
    "test J02"  ~: "isInitial x.x"                         ~: True        ~=? ( isInitial $ stringToVersionNumber "x.x" ),
    "test J03"  ~: "isInitial 1"                          ~: False    ~=? ( isInitial $ VersionNumber [Just 1] ),
    "test J03a" ~: "isInitial 0"                          ~: False    ~=? ( isInitial $ VersionNumber [Just 0] ),
    "test J03b" ~: "isInitial x.0"                        ~: False    ~=? ( isInitial $ stringToVersionNumber "x.0"),
    "test J04"  ~: "isInitial 5"                          ~: False    ~=? ( isInitial $ VersionNumber [Just 5] ),
    "test L01"  ~: "stringToVersionNumber x"              ~: ( stringToVersionNumber "x" )        ~=? (VersionNumber [Nothing]),
    "test L02"  ~: "stringToVersionNumber x.x"            ~: ( stringToVersionNumber "x.x" )        ~=? (VersionNumber [Nothing, Nothing]),
    "test L03"  ~: "stringToVersionNumber x.5"            ~: ( stringToVersionNumber "x.5" )        ~=? (VersionNumber [Nothing, Just 5]),
    "test L04"  ~: "stringToVersionNumber 1.x.5"          ~: ( stringToVersionNumber "1.x.5" )    ~=? (VersionNumber [Just 1, Nothing, Just 5]),
    {-"test M01"  ~: "x == x"                                ~: True        ~=? Nothing == Nothing,-}
    "test M02"  ~: "1 == 1"                               ~: True        ~=? (Just 1) == (Just 1),
    "test M03"  ~: "5 == 5"                               ~: True        ~=? (Just 5) == (Just 5),
    "test M04"  ~: "3 == 5"                               ~: False    ~=? (Just 3) == (Just 5),
    "test M05"  ~: "27 == x"                              ~: False    ~=? (Just 27) == Nothing,
    "test M06"  ~: "x.x.3 == x.x.x.x.x.3"                 ~: True        ~=? ( stringToVersionNumber "x.x.3" == stringToVersionNumber "x.x.x.x.x.3" ),
    "test M07"  ~: "26 == x.x.x.26"                       ~: True        ~=? ( stringToVersionNumber "26" == stringToVersionNumber "x.x.x.26" ),
    "test M07"  ~: "x.x.x.33.x == 33.x"                   ~: True        ~=? ( stringToVersionNumber "x.x.x.33.x" == stringToVersionNumber "33.x" ),
    "test M08"  ~: "x.x.1.x.0.x == 1.x.0.x"               ~: True        ~=? ( stringToVersionNumber "x.x.1.x.0.x" == stringToVersionNumber "1.x.0.x" ),
    "test N01"  ~: "1.x.x < 2.x.x"                        ~: True        ~=? ( stringToVersionNumber "1.x.x" < stringToVersionNumber "2.x.x" ) ,
    "test N02"  ~: "x.5 > x.3"                            ~: True        ~=? ( stringToVersionNumber "x.5" > stringToVersionNumber "x.3" ) ,
    "test N03"  ~: "1.0 < 1.1"                            ~: True        ~=? ( stringToVersionNumber "1.0" < stringToVersionNumber "1.1" ) ,
    "test N04"  ~: "2.0.6 < 2.1.5"                        ~: True        ~=? ( stringToVersionNumber "2.0.6" < stringToVersionNumber "2.1.5" ) ,
    "test N05"  ~: "2.x.x > 1.5"                          ~: True        ~=? ( stringToVersionNumber "2.x.x" > stringToVersionNumber "1.5" ) ,
    "test N06"  ~: "2.x.x > x.1.5"                        ~: True        ~=? ( stringToVersionNumber "2.x.x" > stringToVersionNumber "x.1.5" ) ,
    "test N07"  ~: "2.0.0 > 2.0.0.x"                      ~: False    ~=? ( stringToVersionNumber "2.0.0" > stringToVersionNumber "2.0.0.x" ) ,
    "test N08"  ~: "2.0.0 > 2.0.0.x.x"                    ~: False    ~=? ( stringToVersionNumber "2.0.0" > stringToVersionNumber "2.0.0.x.x" ) ,
    "test N09"  ~: "3.x.x > 3.x.x.x.x"                    ~: False    ~=? ( stringToVersionNumber "3.x.x" > stringToVersionNumber "3.x.x.x.x" ) ,
    "test N10"  ~: "3 > x"                                ~: True     ~=? ( stringToVersionNumber "3" > stringToVersionNumber "x" ) ,
    "test N11"  ~: "x > 4"                                ~: False    ~=? ( stringToVersionNumber "x" > stringToVersionNumber "4" ) ,
    "test N12"  ~: "2.x.x > 2.5.1"                        ~: False    ~=? ( stringToVersionNumber "2.x.x" > stringToVersionNumber "2.5.1" ) ,
    "test N13"  ~: "2 > x.1"                              ~: True     ~=? ( stringToVersionNumber "2" > stringToVersionNumber "x.1" ) ,
    "test N14"  ~: "1.x > 1"                              ~: True     ~=? ( stringToVersionNumber "1.x" > stringToVersionNumber "1" ) ,
    {-"test N09"  ~: assertError "Cannot compare numbers and number placeholders" ( (Just 3) > (Nothing) ) ,-}
    {-"test N10"  ~: assertError "Cannot compare number placeholders and numbers" ( (Nothing) > (Just 4) ) ,-}
    {-"test N11"  ~: assertError "Cannot compare numbers and number placeholders" ( (Just 3) < (Nothing) ) ,-}
    {-"test N12"  ~: assertError "Cannot compare number placeholders and numbers" ( (Nothing) < (Just 4) ) ,-}
    {-"test N13"  ~: assertError "Cannot compare number placeholders and numbers" ( stringToVersionNumber "2.x.x" < stringToVersionNumber "2.5.1" ) ,-}
    "test Q01"  ~: "getNumberOfDimensions x"            ~: 1 ~=? ( getNumberOfDimensions (stringToVersionNumber "x") ) ,
    "test Q02"  ~: "getNumberOfDimensions x.4"          ~: 2 ~=? ( getNumberOfDimensions (stringToVersionNumber "x.4") ) ,
    "test Q03"  ~: "getNumberOfDimensions x.4.x"        ~: 3 ~=? ( getNumberOfDimensions (stringToVersionNumber "x.4.x") ) ,
    "test R01"  ~: "appendDimension x"                  ~: "x.x"    ~=? ( toString $ appendDimension (stringToVersionNumber "x") ) ,
    "test R02"  ~: "appendDimension x.x"                ~: "x.x.x"  ~=? ( toString $ appendDimension (stringToVersionNumber "x.x") ) ,
    "test R03"  ~: "appendDimension 1"                  ~: "x.1"    ~=? ( toString $ appendDimension (stringToVersionNumber "1") ) ,
    "test S01"  ~: "isReleaseBranch 1.x"               ~: True     ~=? ( isReleaseBranch $ stringToVersionNumber "1.x" ) ,
    "test S02"  ~: "isReleaseBranch 2.x"               ~: True     ~=? ( isReleaseBranch $ stringToVersionNumber "2.x" ) ,
    "test S03"  ~: "isReleaseBranch 2.x.x"             ~: False    ~=? ( isReleaseBranch $ stringToVersionNumber "2.x.x" ) ,
    "test S04"  ~: "isReleaseBranch 2.0.x"             ~: True     ~=? ( isReleaseBranch $ stringToVersionNumber "2.0.x" ) ,
    "test S05"  ~: "isReleaseBranch x.0.x"             ~: True     ~=? ( isReleaseBranch $ stringToVersionNumber "x.0.x" ) ,
    "test S06"  ~: "isReleaseBranch x.1.x"             ~: True     ~=? ( isReleaseBranch $ stringToVersionNumber "x.1.x" ) ,
    "test S07"  ~: "isReleaseBranch x.x.1.x"           ~: True     ~=? ( isReleaseBranch $ stringToVersionNumber "x.x.1.x" ) ,
    "test S08"  ~: "isReleaseBranch x.1.x.x"           ~: False    ~=? ( isReleaseBranch $ stringToVersionNumber "x.1.x.x" ) ,
    "test S09"  ~: "isReleaseBranch 1.x.x"             ~: False    ~=? ( isReleaseBranch $ stringToVersionNumber "1.x.x" ) ,
    "test S10"  ~: "isReleaseBranch 1"                 ~: False    ~=? ( isReleaseBranch $ stringToVersionNumber "1" ) ,
    "test S11"  ~: "isReleaseBranch x.1"               ~: False    ~=? ( isReleaseBranch $ stringToVersionNumber "x.1" ) ,
    "test S12"  ~: "isReleaseBranch 1.1.x"             ~: True     ~=? ( isReleaseBranch $ stringToVersionNumber "1.1.x" ) ,
    "test T01"  ~: "isSupportBranch 1.x.x"             ~: True     ~=? ( isSupportBranch $ stringToVersionNumber "1.x.x" ) ,
    "test T02"  ~: "isSupportBranch 0.x.x"             ~: True     ~=? ( isSupportBranch $ stringToVersionNumber "0.x.x" ) ,
    "test T03"  ~: "isSupportBranch 2.x.x"             ~: True     ~=? ( isSupportBranch $ stringToVersionNumber "2.x.x" ) ,
    "test T04"  ~: "isSupportBranch 2.x.0"             ~: False    ~=? ( isSupportBranch $ stringToVersionNumber "2.x.0" ) ,
    "test T05"  ~: "isSupportBranch 2.0.9"             ~: False    ~=? ( isSupportBranch $ stringToVersionNumber "2.0.9" ) ,
    "test T06"  ~: "isSupportBranch x.0.x.x"           ~: True     ~=? ( isSupportBranch $ stringToVersionNumber "x.0.x.x" ) ,
    "test T07"  ~: "isSupportBranch x.x.x.x"           ~: False    ~=? ( isSupportBranch $ stringToVersionNumber "x.x.x.x" ) ,
    "test T08"  ~: "isSupportBranch x.x"               ~: False    ~=? ( isSupportBranch $ stringToVersionNumber "x.x" ) ,
    "test U01"  ~: "isReleaseSnapshot x.x"             ~: False    ~=? ( isReleaseSnapshot $ stringToVersionNumber "x.x" ) ,
    "test U02"  ~: "isReleaseSnapshot 1.x"             ~: False    ~=? ( isReleaseSnapshot $ stringToVersionNumber "1.x" ) ,
    "test U03"  ~: "isReleaseSnapshot 1.0"             ~: True     ~=? ( isReleaseSnapshot $ stringToVersionNumber "1.0" ) ,
    "test U04"  ~: "isReleaseSnapshot x.1.0"           ~: True     ~=? ( isReleaseSnapshot $ stringToVersionNumber "x.1.0" ) ,
    "test U05"  ~: "isReleaseSnapshot 0.1.0"           ~: True     ~=? ( isReleaseSnapshot $ stringToVersionNumber "0.1.0" ) ,
    "test V01"  ~: "isSupportSnapshot x.x"             ~: False    ~=? ( isSupportSnapshot $ stringToVersionNumber "x.x" ) ,
    "test V02"  ~: "isSupportSnapshot 1.x"             ~: False    ~=? ( isSupportSnapshot $ stringToVersionNumber "1.x" ) ,
    "test V03"  ~: "isSupportSnapshot 1.0"             ~: False    ~=? ( isSupportSnapshot $ stringToVersionNumber "1.0" ) ,
    "test V04"  ~: "isSupportSnapshot x.1.0"           ~: False    ~=? ( isSupportSnapshot $ stringToVersionNumber "x.1.0" ) ,
    "test V05"  ~: "isSupportSnapshot 0.1.0"           ~: False    ~=? ( isSupportSnapshot $ stringToVersionNumber "0.1.0" ) ,
    "test V06"  ~: "isSupportSnapshot 0.x.0"           ~: True     ~=? ( isSupportSnapshot $ stringToVersionNumber "0.x.0" ) ,
    "test V07"  ~: "isSupportSnapshot x.0.x.0"         ~: True     ~=? ( isSupportSnapshot $ stringToVersionNumber "x.0.x.0" ) ,
    "test W01"  ~: "isExperimentalBranch x.x.x.x"      ~: True     ~=? ( isExperimentalBranch $ stringToVersionNumber "x.x.x.x" ) ,
    "test W02"  ~: "isExperimentalBranch x"            ~: True     ~=? ( isExperimentalBranch $ stringToVersionNumber "x" ) ,
    "test W03"  ~: "isExperimentalBranch 1.x"          ~: False    ~=? ( isExperimentalBranch $ stringToVersionNumber "1.x" ) ,
    "test X01"  ~: "isExperimentalSnapshot x.x.x.1"    ~: True     ~=? ( isExperimentalSnapshot $ stringToVersionNumber "x.x.x.1" ) ,
    "test X02"  ~: "isExperimentalSnapshot x.5"        ~: True     ~=? ( isExperimentalSnapshot $ stringToVersionNumber "x.5" ) ,
    "test X03"  ~: "isExperimentalSnapshot 32"         ~: True     ~=? ( isExperimentalSnapshot $ stringToVersionNumber "32" ) ,
    "test X04"  ~: "isExperimentalSnapshot x.x"        ~: False    ~=? ( isExperimentalSnapshot $ stringToVersionNumber "x.x" ) ,
    "test Y00"  ~: "generateNewReleaseBranch x"        ~: "0.x"    ~=? ( toString $ generateNewReleaseBranch $ stringToVersionNumber "x" ) ,
    "test Y01"  ~: "generateNewReleaseBranch x.x"      ~: "0.x"    ~=? ( toString $ generateNewReleaseBranch $ stringToVersionNumber "x.x" ) ,
    "test Y02"  ~: "generateNewReleaseBranch 0.x"      ~: "1.x"    ~=? ( toString $ generateNewReleaseBranch $ stringToVersionNumber "0.x" ) ,
    "test Y03"  ~: "generateNewReleaseBranch 1.3.x"    ~: "1.4.x"  ~=? ( toString $ generateNewReleaseBranch $ stringToVersionNumber "1.3.x" ) ,
    "test Y04"  ~: "generateNewReleaseBranch 2.x.x"    ~: "2.0.x"  ~=? ( toString $ generateNewReleaseBranch $ stringToVersionNumber "2.x.x" ) ,
    "test Y040" ~: "generateNewReleaseBranch 2.x.x.x"  ~: "2.x.x.x"~=? ( toString $ generateNewReleaseBranch $ stringToVersionNumber "2.x.x.x" ) ,
    "test Y05"  ~: "generateNewSupportBranch x"        ~: "0.x.x"  ~=? ( toString $ generateNewSupportBranch $ stringToVersionNumber "x" ) ,
    "test Y06"  ~: "generateNewSupportBranch 1.x.x"    ~: "2.x.x"  ~=? ( toString $ generateNewSupportBranch $ stringToVersionNumber "1.x.x" ) ,
    "test Y07"  ~: "generateNewSupportBranch 0.3.x.x"  ~: "0.4.x.x"~=? ( toString $ generateNewSupportBranch $ stringToVersionNumber "0.3.x.x" ) ,
    "test Y08"  ~: "generateNewSupportBranch 1.x.x.x"  ~: "1.x.x.x"~=? ( toString $ generateNewSupportBranch $ stringToVersionNumber "1.x.x.x" ) ,
    "test Y09"  ~: "generateNewReleaseSnapshot x"      ~: "x"      ~=? ( toString $ generateNewReleaseSnapshot $ stringToVersionNumber "x" ) ,
    "test Y10"  ~: "generateNewReleaseSnapshot 1.0.x"  ~: "1.0.0"  ~=? ( toString $ generateNewReleaseSnapshot $ stringToVersionNumber "1.0.x" ) ,
    "test Y11"  ~: "generateNewReleaseSnapshot 1.0.0"  ~: "1.0.1"  ~=? ( toString $ generateNewReleaseSnapshot $ stringToVersionNumber "1.0.0" ) ,
    "test Y12"  ~: "generateNewReleaseSnapshot 2.3.4.5"~: "2.3.4.6"~=? ( toString $ generateNewReleaseSnapshot $ stringToVersionNumber "2.3.4.5" ) ,
    "test Y13"  ~: "generateNewReleaseSnapshot 1.x.x.0"~: "1.x.x.0"~=? ( toString $ generateNewReleaseSnapshot $ stringToVersionNumber "1.x.x.0" ) ,
    "test Y130" ~: "generateNewReleaseSnapshot 1.x.0"  ~: "1.x.0"  ~=? ( toString $ generateNewReleaseSnapshot $ stringToVersionNumber "1.x.0" ) ,
    "test Y14"  ~: "generateNewSupportSnapshot x"      ~: "x"      ~=? ( toString $ generateNewSupportSnapshot $ stringToVersionNumber "x" ) ,
    "test Y15"  ~: "generateNewSupportSnapshot x.1"    ~: "x.1"    ~=? ( toString $ generateNewSupportSnapshot $ stringToVersionNumber "x.1" ) ,
    "test Y16"  ~: "generateNewSupportSnapshot 1.x.1"  ~: "1.x.2"  ~=? ( toString $ generateNewSupportSnapshot $ stringToVersionNumber "1.x.1" ) ,
    "test Y17"  ~: "generateNewSupportSnapshot 2.x.x"  ~: "2.x.0"  ~=? ( toString $ generateNewSupportSnapshot $ stringToVersionNumber "2.x.x" ) ,
    "test Y18"  ~: "generateNewRevision x.1"           ~: "x.2"    ~=? ( toString $ generateNewRevision $ stringToVersionNumber "x.1" ) ,
    "test Y19"  ~: "generateNewRevision x"             ~: "0"      ~=? ( toString $ generateNewRevision $ stringToVersionNumber "x" ) ,
    "test Y20"  ~: "generateNewRevision 1.x.0"         ~: "1.x.0"  ~=? ( toString $ generateNewRevision $ stringToVersionNumber "1.x.0" ) ,
    "test _"    ~: "empty test"                        ~: True     ~=? True
    ]

runTests :: IO Counts
runTests = runTestTT versionNumberTests
